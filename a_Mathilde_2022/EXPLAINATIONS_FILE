#### EXPLANATIONS ####

EXPLENATION 0
    of : Minimiser le controle pour seulement un seul degré de liberté en rajoutant index [],
# By knowing that :
# ddl pelvis = 1 [0] # ddl thorax = 1 [1], 2 [2], 3 [3] # ddl l'humerus = 1 [4], 2 [5], 3 [6] # ddl ulna = 1 [7] # ddl radius = 1 [8] # ddl lunate = 1 [9] # ddl finger = 1 [10]
  objective_functions.add(ObjectiveFcn.Lagrange.MINIMIZE_CONTROL, key="tau", weight=1000, phase=0, index=[3])

EXPLANATION 1
    of : objective_functions.add(ObjectiveFcn.Lagrange.MINIMIZE_CONTROL, key="qdot", phase=0, weight=0.0001)
We want to minimize TAU : PHI = min tau². In our case, we obtain a concave curve.
But, the problem is that down to the curve, we obtain multiples tangents equal to 0, so we can't find the minimum point.
To solve this, we also minimize QDOT. So, PHI = min (tau² + qdot²) to obtain a concave curve but with waves,
wich permits to find easily the minimum point of the curve.

EXPLANATION 2
    # ex : x_bounds[0][3, 0] = vel_pushing
    # [ phase 0 ]
    # [indice du ddl (0 et 1 position y z, 2 et 3 vitesse y z),
    # time] (0 =» 1st point, 1 =» all middle points, 2 =» last point)

EXPLANATION 3
    of : custom constraints/custom objectif

def custom_func_track_rotx_finger_2(all_pn: PenaltyNodeList) -> MX:
            # recover my modele
    model = all_pn.nlp.model
            # recover the index of the segment which has the matrix I want
    rotation_matrix_index = biorbd.segment_index(model, "2proxph_2mcp_flexion")
            # recover all the position
    q = all_pn.nlp.states["q"].mx
            # global JCS gives the local matrix according to the global matrix
 (position, index of my matrice)
    rotation_matrix = all_pn.nlp.model.globalJCS(q, rotation_matrix_index).to_mx()

            # I concatenate my matrice (with vertcat) to put all the values in a vertical vector.
    output = vertcat(rotation_matrix[0, 1], rotation_matrix[0, 2], rotation_matrix[1, 0], rotation_matrix[2, 0],
            rotation_matrix[0, 0] - MX(1))

            # I convert from mx to cx the states q of the vector values of my matrix ("rot_mat" = random name)
    rotation_matrix = BiorbdInterface.mx_to_cx("rot_mat", output, all_pn.nlp.states["q"])

    return rotation_matrix

TIPS
    # alt ctrl E